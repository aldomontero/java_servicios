import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Calendar;
import java.util.LinkedList;

import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NewFechaHora.java
 *
 * Created on 15/11/2009, 01:13:49 AM
 */

/**
 *
 * @author Aldo Montero Murillo
 */
public class AgregarFechaHora extends javax.swing.JDialog {

	private static final long serialVersionUID = 1L;
	public static final short FECHA = 1;
	public static final short HORA = 2;

	private String date;
	private String time;
	
	/** Creates new form NewFechaHora */
    public AgregarFechaHora(JFrame frm, int view, String date) {
    	super(frm, "Fecha y hora", true);
        initComponents();
        
        switch(view){
	        case FECHA:
	        	hora.setEnabled(false);
	        	minuto.setEnabled(false);
	        	segundos.setEnabled(false);
	        	break;
	        case HORA:
	        	dia.setEnabled(false);
	        	mes.setEnabled(false);
	        	anio.setEnabled(false);
	        	break;
	        case FECHA + HORA:
	        	
        }
        
        //formato 2005-12-02 00:00:00.0
        
        if(date != null)
        	if(date.length() <= 8){
	        	setHora(date);
	        	setFecha(date);
	        }else if(date.length() <= 10){
	        	setFecha(date);
	        } else if((date.length() <= 21)){
	        	String[] temp = date.split(" ");
	        	setFecha(temp[0]);
	        	setHora(temp[1]);
	        }
        
        setLocationRelativeTo(frm);
        setVisible(true);
    }

    private void setFecha(String date){
    	String[] temp = date.split("-");
    	ModeloMeses mm = (ModeloMeses)mes.getModel();
    	
    	if(temp.length == 3){
	    	dia.setValue(Integer.parseInt(temp[2]));
	    	Object mes = mm.getNameValueByIndex(Integer.parseInt(temp[1])-1);
	    	mm.setValue(mes);
	    	anio.setValue(Integer.parseInt(temp[0]));
    	} else {
    		Calendar n = Calendar.getInstance();
    		dia.setValue(n.get(Calendar.DAY_OF_MONTH));
    		Object mes = mm.getNameValueByIndex(n.get(Calendar.MONTH));
    		mm.setValue(mes);
    		anio.setValue(n.get(Calendar.YEAR));
    	}
    }
    
    private void setHora(String date){
    	String[] temp = date.split(":");
    	
    	if(temp.length >= 2){
    		int h = Integer.parseInt(temp[0]);
        	int m = Integer.parseInt(temp[1]);

        	if (h >= 0 && h <= 11){
        		segundos.setValue("a.m.");
        	} else if(h >= 12 && h <= 24){
        		segundos.setValue("p.m.");
        		if(h > 12)
        			h = h - 12;
        	}
        	
        	hora.setValue(h);
    		if(m >= 0 && m <= 59)
    			minuto.setValue(m);
    	} else {
    		Calendar n = Calendar.getInstance();
    		int tiempo_hora = n.get(Calendar.HOUR_OF_DAY);
    		
    		if (tiempo_hora >= 0 && tiempo_hora <= 11){
        		segundos.setValue("a.m.");
        	} else if(tiempo_hora >= 12 && tiempo_hora <= 24){
        		segundos.setValue("p.m.");
        		if(tiempo_hora > 12)
        			tiempo_hora = tiempo_hora - 12;
        	}
        	
        	hora.setValue(tiempo_hora);
    		minuto.setValue(n.get(Calendar.MINUTE));
    			
    	}
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

    	top = new JPanel(new GridLayout(2,1));
    	content = new JPanel(null);
    	
    	ImageIcon imgTop = ClaseGlobal.crearIcono("iconos/topModificar.jpg");
    	
        lbHorario = new javax.swing.JLabel();
        lbFecha = new javax.swing.JLabel();
        anio = new javax.swing.JSpinner();
        dia = new javax.swing.JSpinner();
        mes = new javax.swing.JSpinner();
        segundos = new javax.swing.JSpinner();
        minuto = new javax.swing.JSpinner();
        lbAnio = new javax.swing.JLabel();
        lbSegundo = new javax.swing.JLabel();
        lbMes = new javax.swing.JLabel();
        lbDia = new javax.swing.JLabel();
        hora = new javax.swing.JSpinner();
        lbHora = new javax.swing.JLabel();
        lbMinuto = new javax.swing.JLabel();
        lbTop = new javax.swing.JLabel();
        lbDescripcion = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        lbHorario.setText("Horario:"); // NOI18N
        lbHorario.setName("lbHorario"); // NOI18N
        content.add(lbHorario);
        lbHorario.setBounds(10, 130, 40, 14);

        lbFecha.setText("Fecha:"); // NOI18N
        lbFecha.setName("lbFecha"); // NOI18N
        content.add(lbFecha);
        lbFecha.setBounds(10, 60, 33, 14);
        
        SpinnerNumberModel anios = new SpinnerNumberModel();
        anios.setMinimum(1900);
        anios.setMaximum(2100);
        anios.setStepSize(1);

        anio.setName("anio"); // NOI18N
        content.add(anio);
        anio.setBounds(220, 60, 70, 18);
        anio.setModel(anios);
        anio.setValue(2000);
        anio.setEditor(new javax.swing.JSpinner.NumberEditor(anio, "#"));

        SpinnerNumberModel dias = new SpinnerNumberModel();
        dias.setMinimum(1);
        dias.setMaximum(31);
        dias.setStepSize(1);
        
        dia.setName("dia"); // NOI18N
        content.add(dia);
        dia.setBounds(60, 60, 70, 18);
        dia.setModel(dias);
        dia.setValue(1);
        
        mes.setName("mes"); // NOI18N
        content.add(mes);
        mes.setBounds(140, 60, 70, 18);
        mes.setModel(new ModeloMeses());
        
        segundos.setName("segundos"); // NOI18N
        content.add(segundos);
        segundos.setBounds(220, 130, 70, 18);
        segundos.setModel(new ModeloMeridiano());
        
        SpinnerNumberModel minutos = new SpinnerNumberModel();
        minutos.setMinimum(0);
        minutos.setMaximum(59);
        minutos.setStepSize(1);
        
        minuto.setName("minuto"); // NOI18N
        content.add(minuto);
        minuto.setBounds(140, 130, 70, 18);
        minuto.setModel(minutos);
        minuto.setValue(1);
        
        lbAnio.setText("Año"); // NOI18N
        lbAnio.setName("lbAnio"); // NOI18N
        content.add(lbAnio);
        lbAnio.setBounds(220, 40, 70, 14);

        lbSegundo.setText("Segundos"); // NOI18N
        lbSegundo.setName("lbSegundo"); // NOI18N
        //content.add(lbSegundo);
        lbSegundo.setBounds(220, 110, 70, 14);

        lbMes.setText("Mes"); // NOI18N
        lbMes.setName("lbMes"); // NOI18N
        content.add(lbMes);
        lbMes.setBounds(140, 40, 70, 14);

        lbDia.setText("Día"); // NOI18N
        lbDia.setName("lbDia"); // NOI18N
        content.add(lbDia);
        lbDia.setBounds(60, 40, 70, 14);

        SpinnerNumberModel horas = new SpinnerNumberModel();
        horas.setMinimum(0);
        horas.setMaximum(12);
        horas.setStepSize(1);
        
        hora.setName("hora"); // NOI18N
        content.add(hora);
        hora.setBounds(60, 130, 70, 18);
        hora.setModel(horas);
        hora.setValue(1);
        
        lbHora.setText("Hora:"); // NOI18N
        lbHora.setName("lbHora"); // NOI18N
        content.add(lbHora);
        lbHora.setBounds(60, 110, 70, 14);

        lbMinuto.setText("Minutos:"); // NOI18N
        lbMinuto.setName("lbMinuto"); // NOI18N
        content.add(lbMinuto);
        lbMinuto.setBounds(140, 110, 70, 14);

        jButton1.setText("Aceptar"); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        content.add(jButton1);
        jButton1.setBounds(240, 190, 71, 23);

        jButton1.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent arg0) {
				aceptar();
			}
        });
        
        jButton2.setText("Cancelar"); // NOI18N
        jButton2.setName("jButton2"); // NOI18N
        content.add(jButton2);
        jButton2.setBounds(150, 190, 80, 23);

        jButton2.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent arg0) {
				date = null;
				time = null;
				dispose();
			}
        });
        
        lbTop.setIcon(imgTop);
        lbTop.setName("lbTop");

        lbDescripcion.setText("Agregar una fecha y hora");
        lbDescripcion.setName("lbDescripcion");
        lbDescripcion.setHorizontalAlignment(javax.swing.JLabel.CENTER);
        lbDescripcion.setFont(new Font("Verdana", Font.BOLD, 12));
        
        top.setBackground(Color.white);
        
        top.add(lbTop);
        top.add(lbDescripcion);
        
        getContentPane().add(top, BorderLayout.NORTH);
        getContentPane().add(content, BorderLayout.CENTER);
        
        setSize(330, 330);
    }// </editor-fold>


    protected void aceptar() {
    	
    	ModeloMeses mm = (ModeloMeses)mes.getModel();
    	String zm = (String)segundos.getValue();
    	date = anio.getValue() + "-" + ((Integer)mm.getValueIndex() + 1) + "-" +dia.getValue();

    	if(zm.matches("p.m.")){
    		if((Integer)hora.getValue() + 12 < 24)
    			time = ((Integer)hora.getValue() + 12) + ":";
    		else
    			time = "00:";
    	} else {
    		if((Integer)hora.getValue() > 10)
    			time = hora.getValue() + ":";
    		else
    			time = "0" + hora.getValue() + ":";
    	}
    	
    	if((Integer)minuto.getValue() > 10)
			time += minuto.getValue();
		else
			time += "0" + minuto.getValue();

		dispose();
	}

    public String getDate(){
    	return date;
    }
    
    public String getTime(){
    	return time;
    }
    
	private JPanel top;
    private JPanel content;
    
    // Variables declaration - do not modify
    private javax.swing.JSpinner anio;
    private javax.swing.JSpinner dia;
    private javax.swing.JSpinner hora;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel lbAnio;
    private javax.swing.JLabel lbDia;
    private javax.swing.JLabel lbFecha;
    private javax.swing.JLabel lbHora;
    private javax.swing.JLabel lbHorario;
    private javax.swing.JLabel lbMes;
    private javax.swing.JLabel lbMinuto;
    private javax.swing.JLabel lbSegundo;
    private javax.swing.JSpinner mes;
    private javax.swing.JSpinner minuto;
    private javax.swing.JSpinner segundos;
    private javax.swing.JLabel lbTop;
    private javax.swing.JLabel lbDescripcion;
    // End of variables declaration

}

class ModeloMeses implements SpinnerModel {

	/** Posibles valores */
	private String [] valores = {
			"Enero",
			"Febrero",
			"Marzo",
			"Abril",
			"Mayo",
			"Junio",
			"Julio",
			"Agosto",
			"Septiembre",
			"Octubre",
			"Noviembre",
			"Diciembre"
	};
	
	/** Valor mostrado actualmente */
	private int actual=0;
	
	/** Lista de observadores interesados en el cambio del valor actual */
	private LinkedList<ChangeListener> observadores = new LinkedList<ChangeListener>();

	/**
	 * Nos pasan el valor actual. Comprobamos que es correcto, lo guardamos y avisamos
	 * a los observadores.
	 */

	public void setValue(Object value) {
		// Se ignora la entrada si es null
		if (value==null)
			return;
		
		// Se busca el valor en la tabla de valores posibles
		for (int i=0;i<valores.length;i++)
			if (valores[i].equalsIgnoreCase(value.toString()))
			{
				// Se guarda como valor actual
				actual=i;
				// Se avisa a los observadores del cambio.
				fireChangeLister();
				// Una vez encontrado no hace falta seguir con el bucle.
				return;
			}
	}

	/**
	 * Avisa a los observadores del cambio en el valor actual.
	 */
	private void fireChangeLister() {
		ChangeEvent evento = new ChangeEvent(this);
		for (ChangeListener observador: observadores)
			observador.stateChanged(evento);
	}

	/**
	 * Elimina al observador de la lista de observadores.
	 */

	public void removeChangeListener(ChangeListener l) {
		observadores.remove(l);
	}

	/**
	 * Devuelve el valor actual.
	 */

	public Object getNameValueByIndex(int i) {
		return valores[i];
	}
	
	/**
	 * Devuelve el valor actual.
	 */

	public Object getValue() {
		return valores[actual];
	}

	/**
	 * Devuelve el index del valor actual.
	 */

	public int getValueIndex() {
		return actual;
	}
	
	/**
	 * Devuelve el valor que va antes del actual en la lista de valores
	 */

	public Object getPreviousValue() {
		int anterior=(actual-1)%valores.length;
		if (anterior < 0)
			anterior+=valores.length;
		return valores[anterior];
	}

	/**
	 * Devuelve el siguiente valor al actual en la lista de valores
	 */

	public Object getNextValue() {
		return valores[(actual+1)%valores.length];
	}

	/**
	 * Añade el observador a la lista de observadores.
	 */

	public void addChangeListener(ChangeListener l) {
		observadores.add(l);
	}
}

class ModeloMeridiano implements SpinnerModel {

	/** Posibles valores */
	private String [] valores = {
			"a.m.",
			"p.m."
	};
	
	/** Valor mostrado actualmente */
	private int actual=0;
	
	/** Lista de observadores interesados en el cambio del valor actual */
	private LinkedList<ChangeListener> observadores = new LinkedList<ChangeListener>();

	/**
	 * Nos pasan el valor actual. Comprobamos que es correcto, lo guardamos y avisamos
	 * a los observadores.
	 */

	public void setValue(Object value) {
		// Se ignora la entrada si es null
		if (value==null)
			return;
		
		// Se busca el valor en la tabla de valores posibles
		for (int i=0;i<valores.length;i++)
			if (valores[i].equalsIgnoreCase(value.toString()))
			{
				// Se guarda como valor actual
				actual=i;
				// Se avisa a los observadores del cambio.
				fireChangeLister();
				// Una vez encontrado no hace falta seguir con el bucle.
				return;
			}
	}

	/**
	 * Avisa a los observadores del cambio en el valor actual.
	 */
	private void fireChangeLister() {
		ChangeEvent evento = new ChangeEvent(this);
		for (ChangeListener observador: observadores)
			observador.stateChanged(evento);
	}

	/**
	 * Elimina al observador de la lista de observadores.
	 */

	public void removeChangeListener(ChangeListener l) {
		observadores.remove(l);
	}

	/**
	 * Devuelve el valor actual.
	 */

	public Object getValue() {
		return valores[actual];
	}

	/**
	 * Devuelve el index del valor actual.
	 */

	public int getValueIndex() {
		return actual;
	}
	
	/**
	 * Devuelve el valor que va antes del actual en la lista de valores
	 */

	public Object getPreviousValue() {
		int anterior=(actual-1)%valores.length;
		if (anterior < 0)
			anterior+=valores.length;
		return valores[anterior];
	}

	/**
	 * Devuelve el siguiente valor al actual en la lista de valores
	 */

	public Object getNextValue() {
		return valores[(actual+1)%valores.length];
	}

	/**
	 * Añade el observador a la lista de observadores.
	 */

	public void addChangeListener(ChangeListener l) {
		observadores.add(l);
	}
}